<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:vm="clr-namespace:Magnum.Core.ViewModels;assembly=Magnum.Core"
             xmlns:Converters="clr-namespace:Magnum.Controls.Converters"
             xmlns:local="clr-namespace:Magnum.Controls.Breadcrumb"
             mc:Ignorable="d">

  <BooleanToVisibilityConverter x:Key="btv" />
  <Converters:FlipBoolToVisibilityConverter x:Key="fb" />
  <Converters:VisibilityToBoolConverter x:Key="vtb" />
  <Converters:BoolToVisibilityCollapsedConverter x:Key="btvc" />
  <Converters:FlipBoolToVisibilityCollapsedConverter x:Key="fbtvc" />

  <Geometry x:Key="NormalArrow">M0,0 L4,3.5 0,7 z</Geometry>
  <Geometry x:Key="ExpandedArrow">M0,3 L7,3 3.5,7 z</Geometry>
  <Geometry x:Key="ExpanderArrow">M6,1 L2,4 L6,7 M11,1 L7,4 L11,7</Geometry>
  <Geometry x:Key="RefreshBranch">M6,3 A6,10,0,0,0,4,8 M8,12 A6,10,0,0,0,10,7</Geometry>
  <Geometry x:Key="RefreshArrow">M2,7 L7,7 4,9.5z M7,8 L10,5.5 12,8 z</Geometry>
  <PathGeometry x:Key="TreeArrow" Figures="M0,0 L0,6 L6,0 z"/>

  <Geometry x:Key="DownArrow">M0,0 L10,0 5,10Z</Geometry>
  <Geometry x:Key="UpArrow">M0,10 L10,10 5,0Z</Geometry>
  <Geometry x:Key="RightArrow">M0,0 L10,5 L0,10Z</Geometry>
  <Geometry x:Key="LeftArrow">M0,5 L10,10 10,0Z</Geometry>
  <Geometry x:Key="CloseX">M0,0 L1,1 M0,1 L1,0</Geometry>

  <ControlTemplate x:Key="BaseToggleButton" TargetType="{x:Type ToggleButton}">
    <local:HotTrack
            IsSelected="{TemplateBinding IsChecked}"
            SelectedBorderBrush="Transparent"
            BorderThickness="{TemplateBinding BorderThickness}"
            >
      <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                              VerticalAlignment="Center" Grid.RowSpan="2" />

    </local:HotTrack>
  </ControlTemplate>

  <ControlTemplate x:Key="BaseButton" TargetType="{x:Type ButtonBase}">
    <local:HotTrack x:Name="HotTrack" SelectedBorderBrush="{TemplateBinding BorderBrush}"
                Padding="{TemplateBinding Padding}" Background="Transparent" 
                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                BorderThickness="{TemplateBinding BorderThickness}">
      <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalAlignment}" />
    </local:HotTrack>

    <ControlTemplate.Triggers>
      <Trigger Property="IsEnabled" Value="False">
        <Setter TargetName="HotTrack" Property="Background" 
                                Value="{DynamicResource DisabledColorBrush}" />
        <Setter TargetName="HotTrack" Property="Opacity" Value="0.4"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type ButtonBase}">
    <Setter Property="Template" Value="{StaticResource BaseButton}"/>
  </Style>

  <ControlTemplate x:Key="BasicArrowButton" TargetType="{x:Type ToggleButton}" >
    <Border x:Name="border"
                Padding="2,0" Background="Transparent" 
                BorderBrush="Transparent" BorderThickness="1" 
				MinHeight="20" MinWidth ="12" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
      <Path x:Name="path" Fill="{TemplateBinding Foreground}"
                    Data="{StaticResource NormalArrow}"
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center" 
                    Margin="{TemplateBinding Padding}" IsHitTestVisible="True" >
      </Path>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsPressed" Value="True">
        <Setter Property="Data" TargetName="path" Value="{StaticResource ExpandedArrow}"/>
      </Trigger>
      <Trigger Property="IsChecked" Value="True">
        <Setter Property="Data" TargetName="path" Value="{StaticResource ExpandedArrow}"/>
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>

  <Style x:Key="ComboboxNullAsSeparatorStyle" TargetType="{x:Type ComboBoxItem}" BasedOn="{StaticResource {x:Type ComboBoxItem}}">
    <Style.Triggers>
      <DataTrigger Binding="{Binding}" Value="{x:Null}">
        <Setter Property="Template">
          <Setter.Value>
            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
              <Separator HorizontalAlignment="Stretch" IsEnabled="False"/>
            </ControlTemplate>
          </Setter.Value>
        </Setter>
      </DataTrigger>
    </Style.Triggers>
  </Style>

  <ControlTemplate x:Key="TwoContentTemplate" TargetType="{x:Type local:MultiContentControl}">
    <DockPanel>
      <ContentPresenter x:Name="twoContent1" Content="{Binding}" DockPanel.Dock="Left" 
                              Visibility="{Binding ContentVisible2, Converter={StaticResource btvc}, 
                                        RelativeSource={RelativeSource TemplatedParent}}"
                              ContentTemplate="{TemplateBinding ContentTemplate2}" />
      <ContentPresenter x:Name="twoContent2" Content="{Binding}" ContentTemplate="{TemplateBinding ContentTemplate}" />
    </DockPanel>
  </ControlTemplate>

  <ControlTemplate x:Key="ThreeContentTemplate" TargetType="{x:Type local:MultiContentControl}">
    <DockPanel>
      <ContentPresenter Content="{Binding}" DockPanel.Dock="Left" 
                              Visibility="{Binding ContentVisible3, Converter={StaticResource btvc}, 
                                        RelativeSource={RelativeSource TemplatedParent}}"
                              ContentTemplate="{TemplateBinding ContentTemplate3}" />
      <ContentPresenter Content="{Binding}" DockPanel.Dock="Left" 
                              Visibility="{Binding ContentVisible2, Converter={StaticResource btvc}, 
                                        RelativeSource={RelativeSource TemplatedParent}}"
                              ContentTemplate="{TemplateBinding ContentTemplate2}" />
      <ContentPresenter Content="{Binding}" 
                              Visibility="{Binding ContentVisible1, Converter={StaticResource btvc}, 
                                        RelativeSource={RelativeSource TemplatedParent}}"
                              ContentTemplate="{TemplateBinding ContentTemplate}" />
    </DockPanel>
  </ControlTemplate>

  <Style TargetType="{x:Type local:MultiContentControl}">
    <Setter Property="Template" Value="{StaticResource TwoContentTemplate}" />
  </Style>

  <ControlTemplate x:Key="suggestableTextBoxTemplate" TargetType="{x:Type local:SuggestBoxBase}">

    <Border Name="Border" CornerRadius="2"  Background="{DynamicResource MainWindowBackgroundBrush}" 
                BorderBrush="{TemplateBinding BorderBrush}" 
                BorderThickness="{TemplateBinding BorderThickness}" Padding="1" >
      <Grid x:Name="root">
        <TextBlock Text="{TemplateBinding Hint}" Foreground="{DynamicResource DisabledTextBrush}"
                           Visibility="{Binding IsHintVisible, RelativeSource={RelativeSource TemplatedParent}, 
                            Converter={StaticResource btv}}"  Opacity="0.5"  />
        <ScrollViewer Margin="0" x:Name="PART_ContentHost" />
        <Popup x:Name="PART_Popup" AllowsTransparency="true"  
                                   PlacementTarget="{Binding ElementName=PART_ContentHost}"                                   
                                   Placement="Bottom"                                                        
                                   IsOpen="{TemplateBinding IsPopupOpened}"                                     
                                   PopupAnimation="Fade"   
                                   >

          <Border x:Name="DropDownBorder" Background="{DynamicResource MainWindowBackgroundBrush}"  
                                            Width="{Binding ActualWidth, ElementName=PART_ContentHost}"                                             
                                            MaxHeight="100"
                                            BorderBrush="{DynamicResource ToolbarBorderBrush}"
                                            BorderThickness="1,0,1,1">

            <ListBox x:Name="PART_ItemList" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"                                                             
                                                     VerticalContentAlignment="Stretch" HorizontalContentAlignment="Stretch"
                                                     DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                     SelectedValuePath="{TemplateBinding ValuePath}"
                                                     ItemTemplate="{TemplateBinding HeaderTemplate}"
                                                     ItemsSource="{Binding Suggestions, RelativeSource={RelativeSource TemplatedParent}}"
                                                     ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                                                    KeyboardNavigation.AcceptsReturn="True"
                                                     KeyboardNavigation.DirectionalNavigation="Cycle" />
          </Border>
        </Popup>
      </Grid>
    </Border>
  </ControlTemplate>


  <Style TargetType="{x:Type local:SuggestBoxBase}" BasedOn="{StaticResource {x:Type TextBox}}">
    <Setter Property="Template" Value="{StaticResource suggestableTextBoxTemplate}" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
  </Style>


  <Style TargetType="{x:Type local:DropDown}">
    <Setter Property="Background" Value="{DynamicResource MainWindowInnerBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ToolbarBorderBrush}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="HeaderButtonTemplate" Value="{StaticResource BaseToggleButton}" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DropDown}">
          <Grid>
            <ToggleButton x:Name="PART_ToggleButton"  MinWidth="16"
                                      Template="{Binding HeaderButtonTemplate, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}" 
                                      BorderBrush="{TemplateBinding BorderBrush}" 
                                      BorderThickness="{TemplateBinding BorderThickness}"  
                                      HorizontalContentAlignment="Stretch" VerticalContentAlignment="Stretch"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
              <Grid>
                <ContentPresenter Content="{TemplateBinding Header}" />
              </Grid>
            </ToggleButton>
            <Popup x:Name="PART_Popup" Focusable="False"
                               IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, 
                                            RelativeSource={RelativeSource TemplatedParent}}"
                               StaysOpen="False" 
                               HorizontalOffset="{TemplateBinding HorizontalOffset}"
                               VerticalOffset="-3"
                               Placement="{TemplateBinding Placement}" 
                               PlacementTarget="{TemplateBinding PlacementTarget}"
                               
                               PopupAnimation="Slide" AllowsTransparency="True">
              <Border BorderThickness="1" MinWidth="100" MinHeight="10"
                                        BorderBrush="{DynamicResource ToolbarBorderBrush}" 
                                            Background="{TemplateBinding Background}" Name="DropDownBorder">
                <Grid x:Name="PART_DropDown">
                  <Border x:Name="PART_DropDownBorder" 
                                        Background="{TemplateBinding Background}" 
                                            Padding="{TemplateBinding Padding}"
                                        BorderBrush="{DynamicResource ToolbarBorderBrush}" BorderThickness="0">
                    <ContentPresenter x:Name="PART_Content"  Content="{TemplateBinding Content}" />
                  </Border>
                </Grid>
              </Border>
            </Popup>
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="Header" Value="{x:Null}">
              <Setter TargetName="PART_ToggleButton" Property="Template" Value="{StaticResource BasicArrowButton}" />
            </Trigger>
            <Trigger Property="Content" Value="{x:Null}">
              <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger Property="IsDropDownAlignLeft" Value="True">
              <Setter TargetName="PART_Popup" Property="HorizontalOffset"
                                    Value="{Binding ActualWidth, ElementName=PART_ToggleButton}" />
              <Setter TargetName="PART_Popup" Property="VerticalOffset"
                                    Value="{Binding ActualHeight, ElementName=PART_ToggleButton}" />
              <Setter TargetName="PART_Popup" Property="Placement" Value="Left" />
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:DropDownList}">
    <Setter Property="Background" Value="{DynamicResource MainWindowInnerBackgroundBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource MainWindowBorderBrush}" />
    <Setter Property="HeaderButtonTemplate" Value="{StaticResource BaseToggleButton}" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type local:DropDownList}">
          <local:DropDown IsDropDownOpen="{Binding IsDropDownOpen, Mode=TwoWay,
                        RelativeSource={RelativeSource TemplatedParent}}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}" 
                                    
                        HorizontalOffset="{TemplateBinding HorizontalOffset}"
                        VerticalOffset="{TemplateBinding VerticalOffset}"
                        Placement="{TemplateBinding Placement}" 
                        PlacementTarget="{TemplateBinding PlacementTarget}"
                                    
                        Header="{Binding Header,RelativeSource={RelativeSource TemplatedParent}}"
                        HeaderButtonTemplate="{Binding HeaderButtonTemplate,RelativeSource={RelativeSource TemplatedParent}}"            
                                    >
            <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
              <StackPanel Orientation="Vertical">
                <ItemsPresenter x:Name="ItemsPresenter" 
                                        KeyboardNavigation.DirectionalNavigation="Contained" 
                                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
              </StackPanel>
            </ScrollViewer>
          </local:DropDown>

        </ControlTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemContainerStyle" Value="{StaticResource ComboboxNullAsSeparatorStyle}" />
  </Style>

  <ControlTemplate x:Key="HotTrackTemplate" TargetType="{x:Type local:HotTrack}">
    <Border x:Name="borderCurrent"  
                                BorderBrush="Transparent" Background="Transparent">
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CommonStates">
          <VisualState x:Name="Normal" >
          </VisualState>
          <VisualState x:Name="MouseOver">
            <Storyboard>

              <DoubleAnimation Storyboard.TargetName="background"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="0.5" />
              <DoubleAnimation Storyboard.TargetName="highlight"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="1" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="MouseOverGrayed">
            <Storyboard>

              <DoubleAnimation Storyboard.TargetName="background"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="0.015" />
              <DoubleAnimation Storyboard.TargetName="highlight"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="0.05" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Dragging">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="background"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="0.05" />
              <DoubleAnimation Storyboard.TargetName="highlight"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="1" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="DraggingOver">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="background"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="0.05" />
              <DoubleAnimation Storyboard.TargetName="highlight"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="1" />
            </Storyboard>
          </VisualState>
          <VisualState x:Name="Selected">
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="selected"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="1" />
              <DoubleAnimation Storyboard.TargetName="highlight"  Duration="0:0:0.1"
                                             Storyboard.TargetProperty="Opacity"  To="0.5" />
            </Storyboard>
          </VisualState>
        </VisualStateGroup>

      </VisualStateManager.VisualStateGroups>

      <Grid>
        <Grid x:Name="hotTrackGrid">
          <Grid.RowDefinitions>
            <RowDefinition MaxHeight="15"/>
            <RowDefinition/>
          </Grid.RowDefinitions>

          <Rectangle Opacity="0" x:Name="selected"  Fill="{TemplateBinding SelectedBrush}" 
                                        Grid.RowSpan="2"  />
          <Rectangle x:Name="background" Opacity="0" Fill="{TemplateBinding BackgroundBrush}" 
                                        Grid.RowSpan="2"  />
          <Rectangle x:Name="highlight"  Opacity="0" Fill="{TemplateBinding HighlightBrush}" 
                                        Grid.RowSpan="2"/>
        </Grid>
        <Rectangle 
                    Visibility="{Binding FillFullRow, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource btvc}}">
          <Rectangle.Fill>
            <VisualBrush Stretch="Uniform" Visual="{Binding ElementName=hotTrackGrid}"  />
          </Rectangle.Fill>
          <Rectangle.RenderTransform>
            <ScaleTransform ScaleX="-1" />
          </Rectangle.RenderTransform>
        </Rectangle>
        <Border Padding="{TemplateBinding Padding}" Grid.RowSpan="2">
          <ContentPresenter x:Name="content" Content="{TemplateBinding Content}"  />
        </Border>
      </Grid>
    </Border>
    <ControlTemplate.Triggers>
      <Trigger Property="IsSelected" Value="True">
        <Setter TargetName="borderCurrent" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HotTrack},
                                    Mode=FindAncestor}, Path=SelectedBorderBrush}" />
      </Trigger>
      <Trigger Property="IsMouseOver" Value="True">
        <Setter TargetName="borderCurrent" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:HotTrack},
                                    Mode=FindAncestor}, Path=SelectedBorderBrush}" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type local:HotTrack}">
    <Setter Property="SelectedBrush" Value="{DynamicResource AccentColorBrush}" />
    <Setter Property="BackgroundBrush" Value="{DynamicResource MainWindowBackgroundBrush}" />
    <Setter Property="HighlightBrush" Value="{DynamicResource AccentHighlightColorBrush}" />
    <Setter Property="Template" Value="{StaticResource HotTrackTemplate}" />
  </Style>

  <ControlTemplate x:Key="BreadcrumbTemplate" TargetType="{x:Type local:BreadcrumbBase}">
    <Border x:Name="bdr">
      <Border BorderBrush="{DynamicResource MainWindowBorderBrush}" BorderThickness="1">
        <Grid x:Name="BreadcrumbBackgroundGrid" Background="{DynamicResource ToolbarInnerBackgroundBrush}" >
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="*" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>

          <ProgressBar Background="Transparent" Foreground="{DynamicResource {x:Static SystemColors.HotTrackBrushKey}}"
                             IsIndeterminate="{Binding IsIndeterminate, RelativeSource={RelativeSource TemplatedParent}}" Opacity="0.5" Grid.ColumnSpan="3"
                             Visibility="{Binding IsProgressbarVisible, RelativeSource={RelativeSource TemplatedParent}, 
                                Converter={StaticResource btv}}"
                             Value="{Binding Progress, RelativeSource={RelativeSource TemplatedParent}}" />


          <ToggleButton x:Name="PART_Toggle"  Grid.Column="0"  Padding="2,0" VerticalAlignment="Stretch"
                                  IsChecked="{Binding IsBreadcrumbVisible, RelativeSource={RelativeSource TemplatedParent}}" 
                                  Width="{TemplateBinding ActualHeight}"
                                  Template="{StaticResource BaseButton}" Background="Transparent" >
            <ContentControl ContentTemplate="{TemplateBinding IconTemplate}"  
                                        Content="{Binding SelectedValue, RelativeSource={RelativeSource TemplatedParent}}" />
          </ToggleButton>

          <local:SuggestBoxBase x:Name="PART_TextBox" Grid.Column="1" BorderBrush="Transparent"
                                Foreground="{DynamicResource TextBrush}"
                                   DisplayMemberPath="{Binding DisplayMemberPath, RelativeSource={RelativeSource TemplatedParent}}"
                                   ValuePath ="{Binding ValuePath, RelativeSource={RelativeSource TemplatedParent}}"
                                   Text="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}"
                                   Suggestions="{Binding Suggestions, RelativeSource={RelativeSource TemplatedParent}}"
                                   IsEnabled="{Binding IsBreadcrumbVisible, Converter={StaticResource fb}, 
                                              RelativeSource={RelativeSource TemplatedParent}}" 
                                   Visibility="{Binding IsBreadcrumbVisible, Converter={StaticResource fbtvc}, 
                                            RelativeSource={RelativeSource TemplatedParent}}" >

          </local:SuggestBoxBase>

          <local:BreadcrumbCore x:Name="PART_BreadcrumbCore" Grid.Column="1"
                                   ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                                   RootItemsSource="{Binding RootItemsSource, RelativeSource={RelativeSource TemplatedParent}}"
                                   DropDownHeight="{TemplateBinding DropDownHeight}"
                                   DropDownWidth="{TemplateBinding DropDownWidth}"
                                   HeaderTemplate="{TemplateBinding HeaderTemplate}"
                                   IconTemplate="{TemplateBinding IconTemplate}"
                                   Visibility="{Binding IsBreadcrumbVisible, Converter={StaticResource btvc}, 
                                            RelativeSource={RelativeSource TemplatedParent}}">
          </local:BreadcrumbCore>

          <ContentControl Content="{TemplateBinding Buttons}" Grid.Column="2" VerticalAlignment="Stretch" Margin="2,0" />

        </Grid>
      </Border>
    </Border>
  </ControlTemplate>
  <Style TargetType="{x:Type local:BreadcrumbBase}">
    <Style.Resources>
      <Style TargetType="Button" BasedOn="{StaticResource {x:Type Button}}" >
        <Setter Property="Margin" Value="1" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource BaseButton}" />
      </Style>
    </Style.Resources>
    <Setter Property="Template" Value="{StaticResource BreadcrumbTemplate}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel Orientation="Horizontal" />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>
  <Style TargetType="{x:Type local:Breadcrumb}" BasedOn="{StaticResource {x:Type local:BreadcrumbBase}}"/>

  <Style TargetType="{x:Type local:BreadcrumbExpander}" BasedOn="{StaticResource {x:Type local:DropDownList}}">
    <Setter Property="Header">
      <Setter.Value>
        <Path x:Name="path"  Stroke="Black" StrokeThickness="1.2" Data="{StaticResource ExpanderArrow}"
                                HorizontalAlignment="Center" VerticalAlignment="Center" IsHitTestVisible="True" />
      </Setter.Value>
    </Setter>
    <Setter Property="BorderThickness" Value="1" />
  </Style>

  <Style x:Key="focusVisualStyle">
    <Setter Property="Control.Template">
      <Setter.Value>
        <ControlTemplate>
          <Rectangle Stroke="{DynamicResource AccentColorBrush}" StrokeThickness="1" RadiusX="2" RadiusY="2"/>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <ControlTemplate x:Key="BreadcrumbItemTemplate" TargetType="{x:Type local:BreadcrumbItem}">
    <Grid Name="MainGrid" SnapsToDevicePixels="True" 
              Margin="0,0"  HorizontalAlignment="Stretch">
      <!-- If Is separator, display separator -->
      <Separator Visibility="{Binding IsSeparator, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource btv}}" />
      <!-- Otherwise display a grid with popup -->
      <Grid Visibility="{Binding IsSeparator, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource fbtvc}}"  >
        <Grid.ColumnDefinitions>
          <ColumnDefinition Width="*" />
          <ColumnDefinition Width="0"  />
        </Grid.ColumnDefinitions>
        <!-- Header -->
        <DockPanel x:Name="basePanel" SnapsToDevicePixels="True" Grid.Column="0" Margin="0"  
                           LastChildFill="True">


          <!-- Header Toggle Button - visible requires ShowToggle and HasItems -->
          <local:HotTrack IsSelected="{TemplateBinding IsMouseOver}"
                                 x:Name="headerToggleHL" DockPanel.Dock="Right" 
                                 BorderThickness="{TemplateBinding BorderThickness}"
                                 SelectedBorderBrush="{TemplateBinding BorderBrush}"
                                 Visibility="{Binding ShowToggle, RelativeSource={RelativeSource TemplatedParent}, 
                                        Converter={StaticResource btvc}}"
                                >
            <!-- DropDown Popup -->
            <local:DropDown Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, 
                                        Converter={StaticResource btvc}}"     
                                    IsDropDownOpen="{Binding IsDropDownOpen, Mode=TwoWay, 
                                            RelativeSource={RelativeSource TemplatedParent}}">
              <ScrollViewer CanContentScroll="True"  HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto"
                                                      Visibility="{Binding Path=IsLoading, Converter={StaticResource fbtvc},
                                                        Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" 
                                                      >
                <ItemsPresenter x:Name="itemList" HorizontalAlignment="Stretch" VerticalAlignment="Center" 
                                                     SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"                                                      
                                                     MaxHeight="{Binding DropDownHeight, RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbCore}}}" 
                                                     Width="{Binding DropDownWidth, RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbCore}}}" 
                                                     KeyboardNavigation.DirectionalNavigation="None"
                                                     VirtualizingStackPanel.IsVirtualizing="True" 
                                                     VirtualizingStackPanel.VirtualizationMode="Standard"                                                     
                                                    >
                </ItemsPresenter>
              </ScrollViewer>


            </local:DropDown>
          </local:HotTrack>
          <!-- Header Content - visible requres ShowCaption  -->
          <local:HotTrack x:Name="headerHL"  BorderThickness="{TemplateBinding BorderThickness}"
                                 SelectedBorderBrush="{TemplateBinding BorderBrush}"                                 
                                 Visibility="{Binding ShowCaption, RelativeSource={RelativeSource TemplatedParent},
                                            Converter={StaticResource btvc}}"
                                 IsDragging="{Binding IsMouseOver, ElementName=headerToggleHL}">
            <Button x:Name="buttonCurrent"  HorizontalAlignment="Stretch"                                                  
                                                Template="{StaticResource BaseButton}" 
                                                Grid.RowSpan="2" >
              <Button.Content>
                <DockPanel>
                  <!-- Add some space in front if it's inside menu  -->
                  <Rectangle Width="5" DockPanel.Dock="Left" 
                                            Visibility="{Binding IsTopLevel,
                                                RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource fbtvc}}" />
                  <local:MultiContentControl 
                                                        ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                        ContentTemplate2="{TemplateBinding IconTemplate}"
                                                        ContentVisible2="{TemplateBinding ShowIcon}"
                                    />
                </DockPanel>
              </Button.Content>
            </Button>
          </local:HotTrack>
        </DockPanel>


      </Grid>

    </Grid>
  </ControlTemplate>

  <Style TargetType="{x:Type local:BreadcrumbItem}" >

    <Setter Property="HorizontalAlignment" Value="Stretch"  />
    <Setter Property="VerticalAlignment" Value="Stretch"  />
    <Setter Property="FocusVisualStyle" Value="{StaticResource focusVisualStyle}" />
    <Setter Property="BorderBrush" Value="Transparent" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="IsDropDownOpen" Value="{Binding IsItemExpanded, Mode=TwoWay}"  />
    <Setter Property="ItemContainerStyle" 
                Value="{Binding ItemContainerStyle, 
            RelativeSource={RelativeSource AncestorType={x:Type local:Breadcrumb}}}" />
    <Setter Property="Template" Value="{StaticResource BreadcrumbItemTemplate}" />
    <Setter Property="MaxHeight" Value="{Binding ActualHeight, Mode=OneWay,
            RelativeSource={RelativeSource AncestorType={x:Type local:Breadcrumb}}}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel IsItemsHost="True" Orientation="Vertical" 
                                VirtualizingPanel.IsVirtualizing="True"
                                VirtualizingPanel.IsContainerVirtualizable="True"
                                VirtualizingPanel.VirtualizationMode="Standard"
                                />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
  </Style>

  <Style TargetType="{x:Type local:BreadcrumbOverflowPanel}" BasedOn="{StaticResource {x:Type ItemsControl}}" >

    <Setter Property="Background" Value="Transparent" />

    <Setter Property="HeaderTemplate" Value="{Binding HeaderTemplate, 
                                                    RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbCore}}}" />
    <Setter Property="IconTemplate" Value="{Binding IconTemplate, 
                                                    RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbCore}}}" />

    <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Type local:BreadcrumbItem}}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <StackPanel IsItemsHost="True" Orientation="Vertical" 
                                VirtualizingPanel.IsVirtualizing="True"
                                VirtualizingPanel.IsContainerVirtualizable="True"
                                VirtualizingPanel.VirtualizationMode="Standard"
                                />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>
    <Setter Property="ItemsSource" Value="{Binding OverflowedItems, 
                                                    RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbCore}}}" />
  </Style>

  <Style TargetType="{x:Type local:BreadcrumbCore}" >
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="ItemContainerStyle" Value="{DynamicResource {x:Type local:BreadcrumbItem}}" />
    <Setter Property="ItemsPanel">
      <Setter.Value>
        <ItemsPanelTemplate>
          <local:BreadcrumbCorePanel IsItemsHost="True"   />
        </ItemsPanelTemplate>
      </Setter.Value>
    </Setter>

    <Setter Property="Template">
      <Setter.Value>

        <ControlTemplate TargetType="{x:Type local:BreadcrumbCore}">
          <Border BorderBrush="{TemplateBinding BorderBrush}" IsHitTestVisible="True"  
                            BorderThickness="{TemplateBinding BorderThickness}" MinHeight="25">
            <DockPanel Margin="1,0" Background="Transparent" IsHitTestVisible="True" >
              <local:DropDown DockPanel.Dock="Left" 
                                         Visibility="{Binding ShowDropDown, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource btvc}}"
                                         IsDropDownOpen="{Binding IsDropDownOpen, Mode=TwoWay, 
                                            RelativeSource={RelativeSource TemplatedParent}}" 
                                         VerticalAlignment="Stretch" >
                <local:DropDown.Header>
                  <Grid>
                    <Path Stroke="Black" StrokeThickness="1.2" Data="{StaticResource ExpanderArrow}"
                                            HorizontalAlignment="Center" VerticalAlignment="Center" 
                                            Visibility="{Binding IsOverflowed, RelativeSource={RelativeSource TemplatedParent},
                                            Converter={StaticResource btv}}"
                                          Margin="{TemplateBinding Padding}" IsHitTestVisible="True" />

                    <ToggleButton Template="{StaticResource BasicArrowButton}" IsHitTestVisible="False" 
                                                      Visibility="{Binding IsOverflowed, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource fb}}"
                                                      IsChecked="{Binding IsDropDownOpen, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                      />
                  </Grid>
                </local:DropDown.Header>
                <local:DropDown.Content>

                  <ScrollViewer MaxHeight="{TemplateBinding DropDownHeight}" 
                                                  Width="{TemplateBinding DropDownWidth}"
                                                  HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Auto">
                    <StackPanel Orientation="Vertical" >
                      <local:BreadcrumbOverflowPanel ItemsSource="{TemplateBinding OverflowedItems}" />
                      <Separator HorizontalAlignment="Stretch" Visibility="{Binding IsOverflowed, 
                                                            RelativeSource={RelativeSource TemplatedParent},
                                                            Converter={StaticResource btv}}" />
                      <local:BreadcrumbOverflowPanel ItemsSource="{TemplateBinding RootItemsSource}" />
                    </StackPanel>

                  </ScrollViewer>
                </local:DropDown.Content>

              </local:DropDown>
              <ItemsPresenter x:Name="PART_BreadcrumbList" HorizontalAlignment="Left" VerticalAlignment="Center" 
                                                     SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"                                        
                                                     KeyboardNavigation.DirectionalNavigation="None"
                                            
                                            >
              </ItemsPresenter>

            </DockPanel>
          </Border>
        </ControlTemplate>
      </Setter.Value>
    </Setter>

  </Style>


  <ItemsPanelTemplate x:Key="StackItemPanelTemplate">
    <local:OneItemPanel />
    <!--<VirtualizingStackPanel VirtualizingPanel.IsVirtualizing="True" VirtualizingPanel.VirtualizationMode="Standard"  
                                            HorizontalAlignment="Stretch" Orientation="Horizontal" VerticalAlignment="Stretch" />-->
  </ItemsPanelTemplate>

  <ControlTemplate x:Key="BreadcrumbTreeItemTemplate" TargetType="{x:Type local:BreadcrumbTreeItem}">
    <local:OverflowableStackPanel HorizontalAlignment="Stretch" Orientation="Horizontal" 
                                   OverflowItemCount="{Binding OverflowItemCount, RelativeSource={RelativeSource TemplatedParent}
                                                , Mode=OneWayToSource}" >
      <VisualStateManager.VisualStateGroups>
        <VisualStateGroup x:Name="CaptionStates">
          <VisualState x:Name="ShowCaption" >
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="headerHL"  Duration="0:0:1"
                                             Storyboard.TargetProperty="MaxWidth" 
                                             To="1000" />
              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="headerHL"
                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="00:00:00">
                  <DiscreteObjectKeyFrame.Value>
                    <Visibility>Visible</Visibility>
                  </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
              </ObjectAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
          <VisualState x:Name="HideCaption"  >
            <Storyboard>
              <DoubleAnimation Storyboard.TargetName="headerHL"  Duration="0:0:0"
                                             Storyboard.TargetProperty="MaxWidth" To="{Binding ActualWidth, ElementName=PART_CaptionButton}"  />
              <DoubleAnimation Storyboard.TargetName="headerHL"  Duration="0:0:1"
                                             Storyboard.TargetProperty="MaxWidth" To="0"  />
              <ObjectAnimationUsingKeyFrames Storyboard.TargetName="headerHL"
                                                   Storyboard.TargetProperty="(UIElement.Visibility)">
                <DiscreteObjectKeyFrame KeyTime="00:00:1">
                  <DiscreteObjectKeyFrame.Value>
                    <Visibility>Collapsed</Visibility>
                  </DiscreteObjectKeyFrame.Value>
                </DiscreteObjectKeyFrame>
              </ObjectAnimationUsingKeyFrames>
            </Storyboard>
          </VisualState>
        </VisualStateGroup>
      </VisualStateManager.VisualStateGroups>

      <local:HotTrack Grid.Column="0" Grid.Row="0"   x:Name="headerHL" local:OverflowableStackPanel.CanOverflow="True"
                         SelectedBorderBrush="{TemplateBinding BorderBrush}" MaxWidth="1000"
                         BorderThickness="1,0" >

        <StackPanel Orientation="Horizontal">
          <Button Template="{StaticResource BaseButton}" x:Name="PART_CaptionButton"  
                            MaxWidth="1000"
                            >
            <ContentPresenter x:Name="PART_Header" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"                                   
                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" ContentSource="Header" />
          </Button>
          <local:HotTrack x:Name="headerToggleHL"  local:OverflowableStackPanel.CanOverflow="True"
                                 BorderThickness="1,0,0,0"
                                 SelectedBorderBrush="Transparent"
                                 Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, 
                                        Converter={StaticResource btvc}}"
                                >
            <local:DropDownList x:Name="PART_Toggle" ItemsSource="{TemplateBinding ItemsSource}"
                                  Visibility="{Binding HasItems, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource btvc}}" 
                                  SelectedValuePath="{Binding ValuePath, RelativeSource={RelativeSource TemplatedParent}}"
                                  IsDropDownOpen="{Binding IsItemExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  SelectedValue="{Binding SelectedChild, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                  ItemTemplate="{TemplateBinding MenuItemTemplate}" >
            </local:DropDownList>
          </local:HotTrack>

        </StackPanel>
      </local:HotTrack>



      <ItemsPresenter x:Name="ItemsHost" Grid.Column="1" />

    </local:OverflowableStackPanel>
    <ControlTemplate.Triggers>
      <MultiTrigger >
        <MultiTrigger.Conditions>
          <Condition Property="IsChildSelected" Value="false" />
          <Condition Property="IsCurrentSelected" Value="false" />
        </MultiTrigger.Conditions>
        <MultiTrigger.Setters>
          <Setter Property="Visibility" Value="Collapsed"/>
        </MultiTrigger.Setters>
      </MultiTrigger>
      <Trigger  SourceName="headerHL" Property="IsMouseDirectlyOver" Value="True">
        <Setter TargetName="headerToggleHL" Property="IsEnabled" Value="False" />
      </Trigger>
    </ControlTemplate.Triggers>
  </ControlTemplate>
  <Style TargetType="{x:Type local:BreadcrumbTreeItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
    <Setter Property="OverflowedItemContainerStyle" Value="{Binding OverflowedItemContainerStyle, 
            RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbTree}}}" />
    <Setter Property="Padding" Value="1,0,0,0"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Template" Value="{StaticResource BreadcrumbTreeItemTemplate}" />
    <Setter Property="ItemsPanel" Value="{StaticResource StackItemPanelTemplate}" />
    <Setter Property="MenuItemTemplate" Value="{Binding MenuItemTemplate, 
            RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbTree}}}" />
    <Style.Triggers>
      <!--This trigger is needed, because RelativeSource binding can only succeeds if the current MenuItem is already connected to its visual parent-->
      <Trigger Property="IsVisible" Value="True">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
      </Trigger>

    </Style.Triggers>

  </Style>

  <ControlTemplate x:Key="BreadcrumbTreeTemplate" TargetType="{x:Type local:BreadcrumbTree}">
    <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
      <ItemsPresenter />
    </Border>
  </ControlTemplate>
  <Style x:Key="BreadcrumbTreeItemStyle" TargetType="{x:Type local:BreadcrumbTreeItem}">
    <Setter Property="Background" Value="Transparent"/>
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.ActiveBorderBrushKey}}" />
    <Setter Property="OverflowedItemContainerStyle" Value="{Binding OverflowedItemContainerStyle, 
            RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbTree}}}" />
    <Setter Property="Padding" Value="1,0,0,0"/>
    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    <Setter Property="Template" Value="{StaticResource BreadcrumbTreeItemTemplate}" />
    <Setter Property="ItemsPanel" Value="{StaticResource StackItemPanelTemplate}" />
    <Setter Property="MenuItemTemplate" Value="{Binding MenuItemTemplate, 
            RelativeSource={RelativeSource AncestorType={x:Type local:BreadcrumbTree}}}" />
    <Style.Triggers>
      <!--This trigger is needed, because RelativeSource binding can only succeeds if the current MenuItem is already connected to its visual parent-->
      <Trigger Property="IsVisible" Value="True">
        <Setter Property="HorizontalContentAlignment" Value="{Binding Path=HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding Path=VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
      </Trigger>

    </Style.Triggers>

  </Style>
  <Style TargetType="{x:Type local:BreadcrumbTree}">
    <Setter Property="BorderThickness" Value="0" />
    <Setter Property="VerticalContentAlignment" Value="Stretch" />
    <Setter Property="ItemContainerStyle" Value="{StaticResource BreadcrumbTreeItemStyle}" />
    <Setter Property="ItemsPanel" Value="{StaticResource StackItemPanelTemplate}" />
    <Setter Property="Template" Value="{StaticResource BreadcrumbTreeTemplate}" />
  </Style>
</ResourceDictionary>
